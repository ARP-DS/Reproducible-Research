install_from_swirl("R Programming")
search(swirl)
search("swirl")
search()
q()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
num_vect
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char,"ARP")
my_name
paste(my_name,collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnormm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- samle(c(y,z),100)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patien,my_matrix)
cbind(patient,my_matrix)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data) <- cnames
my_data
9 >= 10
!5 == 7
isTRUE(3)
!!TRUE
!!FALSE
!isTRUE(TRUE)
sum(c(1,2,3))
x -> c(1,2,3)
x <- c(1,2,3)
dim(x)
ncol(x)
length(x)
5%%2
5/2
?sd
%p% <- function(left,right){paste(left,right,sep=" ")}
"%p%" <- function(left,right){paste(left,right,sep=" ")}
"Good%p%job!"
a <- function(left,right){paste(left,right,sep=" ")}
a("foo","asdf")
"a"+"b"
"%p%" <- function(left,right){paste(left,right,sep=" ")}
"Good %p% job!"
"%mult_add_one%" <- function(left, right){
left * right + 1
}
"%mult_add_one%" <- function(left, right){
left * right + 1
}
4 "%mult_add_one%" 5
"4 %mult_add_one% 5"
"4 mult_add_one 5"
"%x%" <- function(left,right) {}
"%x%" <- function(left,right) {left*right+1}
4%x%5
"%x%" <- function(left,right) {paste(left,right,sep=" ")}
"asdf%x%asdf"
asdf%x%asdf
"asdf"%x%"asdf"
cube <- function(x,n) {}
cube <- function(x,n) {x^n}
cube(3)
x <- 1:10
if(x >5){x <- 0}
install.packages("xlsx")
library(xlsx)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone ~ Wind, data=airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price~carat|color*cut, data=diamonds, strip=FALSE, pch=20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20, xlab = myxlab, ylab = myylab, main = mymain)
exit
library(swirl)
swirl()
colors()
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green",5))
p3 <- colorRampPalette(c("blue","green"),alpha=5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom(c("point","smooth")))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g <- ggplot(mpg,aes(displ,hwy))
summayr(g)
summary(g)
g+geom()
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=.5)
g+geom_point(size=4,alpha=.5,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=0.5)+geom_smooth((size=4,linetype=3,method="lm",se=FALSE))
g+geom_point(aes(color=drv),size=2,alpha=0.5)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
with(testdat,plot(myx,myy,type="l",ylim=c(-3,3)))
plot(myx,myy,type="l",ylim=c(-3,3))
g <- ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+faced_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",
title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamond,binwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price, data=diamonds,geom="density")
qplot(price, data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth(method="lm"))
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut)+geom_smooth(method="lm")
g <- ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4,na.rm=TRUE))
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
str(diamonds)
a <- xyplot(carat~cut,data=diamonds)
library(lattice)
a <- xyplot(carat~cut,data=diamonds)
class(a)
library(nlme)
library(lattice)
xyplot(weight~Time|Diet,BodyWeight)
points()
points(wieght,Time)
library(datasets)
data("airquality")
data(airquality)
qplot(Wind,Ozone,data=ariquality,facets=.~factor(Month))
airquality=transform(airquality,Month=factor(Month))
qplot(Wind,Ozone,data=ariquality,facets=.~Month)
qplot(Wind,Ozone,data=airquality,facets=.~Month)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
library(kernlab)
data?
data(spam)
str(spam)
str(spam[ ,1:5])
set.seed(3435)
trainIndicator=rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
head(trainIndicator)
head(spam)
trainspam=spam[trainIndicator==1,]
testspam=spam[trainIndicator==0,]
head(trainspam)
str(trainspam)
str(trainIndicator)
str(testIndicator)
names(trainspam)
trainspam[1:5,58]
trainspam[1:5,55]
plot(trainspam$capitalAve~trainspam$type)
setwd("C:/Users/Lenovo/Desktop/Coursera/Course5_Reproducible Research/Project 1")
# Download data
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,destfile = "Project1.zip")
t1 <- read.table(unz("Project1.zip","activity.csv"), header=T, sep=",")
closeAllConnections()
# Transform data to table dataframe and remove NA
library(dplyr)
t2 <- tbl_df(t1)
t3 <- t2[complete.cases(t2), ]
#--------------------------------------------------------------------------
# Histogram of the total number of steps taken each day
t4 <- t3%>%
group_by(date) %>%
summarise(stepseachday=sum(steps))
hist(t4$stepseachday,xlab = "Number of steps", main = "Steps each day")
# Median and mean of all steps taken per day
summarise(t4, median=median(stepseachday),mean=mean(stepseachday))
#--------------------------------------------------------------------------
# Time series plot of the 5-min interval and the average number of steps across all days.
t5 <- t3%>%
group_by(interval) %>%
summarise(av=mean(steps))
with(t5,plot(interval,av,type = "l",xlab = "5-minute interval",ylab = "average of steps"))
# 5-minute interval with the maximum number of steps on average.
t6 <- arrange(t5, desc(av))
t6[1,1]
#--------------------------------------------------------------------------
# Calculate the number of missing values in the dataset
v1 <- is.na(t1[,1])
sum(v1,na.rm = TRUE)
# Fill in the missing values with the mean of the steps for 5-minute interval.
t7 <- merge(x=t2,y=t5,by="interval")
t8 <- t7%>%
mutate(steps=as.double(steps)) %>%
mutate(steps = case_when(is.na(steps)==TRUE~av,
TRUE~steps)) %>%
select(steps,date,interval)
# Histogram of the total number of steps taken each day
t9 <- t8%>%
group_by(date) %>%
summarise(stepseachday=sum(steps))
hist(t9$stepseachday,xlab = "Number of steps", main = "Steps each day")
# Median and mean of all steps taken per day
summarise(t9, median=median(stepseachday),mean=mean(stepseachday))
#--------------------------------------------------------------------------
# Create a new factor variable with the levels "weekday" and "weekend" AQUI!!!!!
library(lubridate)
t10 <- t8%>%
mutate(date=as.Date(date)) %>%
mutate(typeday=wday(date))
t10<- tbl_df(t10)
temp <- t10%>%filter(typeday %in% c(2,3,4,5,6))
temp <- tbl_df(temp)
tweekday <- t10 %>%
filter(typeday %in% c(2,3,4,5,6)) %>%
group_by(interval)%>%
summarise(av=mean(steps))
##    mutate(typeday="weekday")
tweekend <- t10%>%
filter(typeday %in% c(1,7))%>%
group_by(interval)%>%
summarise(av=mean(steps))%>%
mutate(typeday="weekend")
nrow(tweekday)
nrow(tweekend)
tweekday <- t10 %>%
filter(typeday %in% c(2,3,4,5,6)) %>%
group_by(interval)%>%
summarise(av=mean(steps))
mutate(typeday="weekday")
tweekday <- t10 %>%
filter(typeday %in% c(2,3,4,5,6)) %>%
group_by(interval)%>%
summarise(av=mean(steps)) %>%
mutate(typeday="weekday")
nrow(tweekend)
nrow(tweekday)
t11<- bind_rows(tweekday,tweekend)
View(t11)
library(lattice)
xyplot(steps~interval|typeday,data=t11,layout=c(1,2),type="l",xlab="Interval",ylab="Number of steps")
xyplot(av~interval|typeday,data=t11,layout=c(1,2),type="l",xlab="Interval",ylab="Number of steps")
str(t11)
t12<-mutate(t11,typeday=as.factor(typeday))
str(t12)
library(lattice)
xyplot(av~interval|typeday,data=t12,layout=c(1,2),type="l",xlab="Interval",ylab="Number of steps")
